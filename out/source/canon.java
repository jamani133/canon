/* autogenerated by Processing revision 1293 on 2025-05-23 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class canon extends PApplet {


public int RED = color(200,0,0);
public int GREEN = color(0,200,0);
public int BLUE = color(0,0,200);
public int YELLOW = color(180,180,0);
public int CYAN = color(0,180,180);
public int MAGENTA = color(180,0,180);
public int GRAY = color(160);
public int ORANGE = color(180,90,0);
public int LIGHT_BLUE = color(80,80,160);
public int BRIGHT_BLUE = color(80,80,255);




public void setup(){
    /* size commented out by preprocessor */;
    setupWaterSection();
    setupPlasmaSection();
    setupPressureSection();
    setupLineSection();
    setupMotorSection();
    setupFireSection();
}

public void draw(){
    background(200);
    handleWaterSection();
    handlePlasmaSection();
    handlePressureSection();
    handleLineSection();
    handleFireSection();
    handleMotorSection();
    plasmaI.active = keyPressed;
}
public void bgRect(float posX, float posY, float width, float height){
    stroke(80);
    strokeWeight(3);
    fill(120);
    rect(posX,posY,width,height,20);
}
class BarIndicator{
    float posX = 50;
    float posY = 50;
    float fill = 0.3f;
    int bg = color(50);
    int fg = color(0,255,0);
    float width = 300;
    float height = 50;
    String heading = "Heading : ";
    String unit = "\tBar";
    float range = 9.81f;
    boolean drawBG = false;

    public void show(){
        if(this.drawBG){
            fill(120);
            strokeWeight(3);
            stroke(80);
            rect(this.posX-25,this.posY-40,this.width+50,this.height+65,20);
        }
        fill(this.bg);
        strokeWeight(3);
        stroke(0);
        rect(this.posX,this.posY,this.width,this.height);
        fill(this.fg);
        noStroke();
        rect(this.posX+3,this.posY+3,this.width*this.fill-4,this.height-5);
        fill(255);
        textAlign(LEFT,CENTER);
        textSize(25);
        text(heading+nf(PApplet.parseFloat(round(this.fill*range*100))/100,0,2)+unit,this.posX,this.posY-18);
    }
    public void handle(){
        //this.update();
        this.show();
    }
}
class Button{

    float posX = 100;
    float posY = 400;
    int baseColor = GRAY;
    boolean active = false;
    boolean prevPressed = false;
    String text = "Button";

    public void render(){
        if(mouseInRect(this.posX,this.posY,100,40)){
            fill(this.active?pressedColor(baseColor):selectedColor(baseColor));
            stroke(40);
            strokeWeight(3);
        }else{
            fill(baseColor);
            stroke(110);
            strokeWeight(3);
        }
        rect(this.posX,this.posY,100,40);
        fill(0);
        textAlign(CENTER,CENTER);
        textSize(30);
        text(this.text,this.posX+50,this.posY+20);
    }
    public void update(){
        if(mousePressed){
            if(mouseInRect(this.posX,this.posY,100,40)){
                if(!this.prevPressed){
                    active = true;
                }
            }else{
                active = false;
            }
        }else{
            active = false;
        }
        this.prevPressed = mousePressed;
    }

    public void handle(){
        this.update();
        this.render();
    }
}
class FireButton{
    float posX = 0;
    float posY = 0;
    boolean active = false;
    boolean armed = false;
    PImage background = null;
    boolean prevPressed = false;
    public void render(){
        if(background != null){
            image(background,this.posX,this.posY,450,450);
        }
        if(this.armed){
            if(this.active){
                fill(requestedColor(RED));
            }else{
                fill(RED);
            }
        }else{
            fill(inactiveColor(RED));
        }
        stroke(0);
        strokeWeight(mouseIn(this.posX+225,this.posY+225,175)?5:1);
        ellipse(this.posX+225,this.posY+225,350,350);
        if(this.armed){
            fill(100,0,0);
            textSize(120);
            textAlign(CENTER,CENTER);
            text("FIRE",this.posX+225,this.posY+225);
        }else{
            fill(75,0,0);
            textSize(70);
            textAlign(CENTER,CENTER);
            text("DISARMED",this.posX+225,this.posY+225);
            fill(120,120,120,120);
            stroke(120);
            strokeWeight(4);
            rect(this.posX+25,this.posY+25,399,399,40);
        }
        noFill();
        stroke(90);
        strokeWeight(8);
        rect(this.posX,this.posY,450,450,5);
    }
    public void update(){
        if(mousePressed){
            if(mouseIn(this.posX+225,this.posY+225,175)){
                if(!this.prevPressed){
                    active = true;
                }
            }else{
                active = false;
            }
        }else{
            active = false;
        }
        this.prevPressed = mousePressed;
    }

    public void handle(){
        this.update();
        this.render();
    }
}
float firePosX = 1150;
float firePosY = 215;
FireButton fireButtonB = new FireButton();
public void setupFireSection(){
    fireButtonB.background=loadImage("buttonBG.png");
    fireButtonB.posX = firePosX+25;
    fireButtonB.posY = firePosY+25;
}

public void handleFireSection(){
    bgRect(firePosX,firePosY,500,600);
    fireButtonB.armed = millis()%10000>5000;
    fireButtonB.handle();
}
class Indicator{
    float posX = 200;
    float posY = 500;
    boolean active = false;
    boolean requested = false;
    int baseColor = YELLOW;
    String text = "Indicator";
    float textSize = 25;

    public void render(){ 
        if(this.active){
            fill(this.baseColor);
        }else{
            fill(inactiveColor(this.baseColor));
        }
        if(this.requested){
            stroke(requestedColor(this.baseColor));
        }else{
            stroke(110);
        }
        strokeWeight(3);
        rect(this.posX,this.posY,100,40);
        fill(0);
        textAlign(CENTER,CENTER);
        textSize(this.textSize);
        text(this.text,this.posX+50,this.posY+20);
    }

    public void handle(){
        this.render();
    }
}
class Joystick{
    float size = 200;
    float posX = 400;
    float posY = 400;
    float joyX = 0;
    float joyY = 0;
    boolean dragging = false;
    boolean prevPress = false;
    public void render(){
        stroke(80);
        strokeWeight(3);
        fill(120);
        rect(this.posX,this.posY,this.size,this.size,20);
        noStroke();
        fill(160);
        ellipse(this.posX+(this.size/2), this.posY+(this.size/2), this.size/10*8, this.size/10*8);
        fill(200,0,0);
        ellipse(this.posX+(this.size/2)+((this.size*0.25f)*this.joyX),this.posY+(this.size/2)+((this.size*0.25f)*this.joyY),this.size*0.3f,this.size*0.3f);
    }
    public void update(){
        if(mouseIn(this.posX+(this.size/2),this.posX+(this.size/2),this.size/10*4)){
            if(mousePressed && !this.prevPress){
                this.dragging = true;
            }
        }
        if(!mousePressed){
                this.dragging = false;
        }
        if(this.dragging){
            float dx = (mouseX-(this.posX+(this.size/2)))/(this.size/4);
            float dy = (mouseY-(this.posY+(this.size/2)))/(this.size/4);
            float d = sqrt(sqr(dx)+sqr(dy));
            if(d>1){
                dy = dy/d;
                dx = dx/d;
            }
            
            joyX = dx;
            joyY = dy;
        }else{
            joyX = 0;
            joyY = 0;
        }
        this.prevPress = mousePressed;
    }
    public void handle(){
        this.update();
        this.render();
    }
}

BarIndicator linePressureI = new BarIndicator();

public void setupLineSection(){
    linePressureI.posX = 1175;
    linePressureI.posY = 90;
    linePressureI.drawBG = true;
    linePressureI.heading = "Line Pressure : ";
    linePressureI.unit = " MPa";
    linePressureI.range = 1;
    linePressureI.width = 450;
}
public void handleLineSection(){
    linePressureI.handle();
}
float motorPosX = 50;
float motorPosY = 535;

public void setupMotorSection(){

}

public void handleMotorSection(){
    bgRect(motorPosX,motorPosY,500,400);
}


//act2 s2 act3 S1&2
float plasmaPosX = 50;
float plasmaPosY = 310;

PlasmaIndicator plasmaI = new PlasmaIndicator();
Indicator plasmaAutoI = new Indicator();
ValSlider plasmaDelayS = new ValSlider();
ValSlider plasmaDurationS = new ValSlider();
Button plasmaTestB = new Button();
Button plasmaAutoB = new Button();

public void setupPlasmaSection(){
    plasmaI.posX=plasmaPosX+25;
    plasmaI.posY=plasmaPosY+40;
    plasmaAutoI.posX = plasmaPosX+141.666f;
    plasmaAutoI.posY = plasmaPosY+45;
    plasmaAutoI.baseColor = MAGENTA;
    plasmaAutoI.text = "Auto";
    plasmaDelayS.posX=plasmaPosX+375;
    plasmaDelayS.posY=plasmaPosY+45;
    plasmaDurationS.posX=plasmaPosX+258.333f;
    plasmaDurationS.posY=plasmaPosY+45;
    plasmaDurationS.value=0.15f;
    plasmaDelayS.value=0.3f;
    plasmaTestB.posY = plasmaAutoB.posY = plasmaPosY+110;
    plasmaTestB.posX = plasmaPosX+25;
    plasmaTestB.baseColor = CYAN;
    plasmaTestB.text = "IGNITE";
    plasmaAutoB.posX = plasmaPosX+141.666f;
    plasmaAutoB.baseColor = MAGENTA;
    plasmaAutoB.text = "Toggle";
}


public void handlePlasmaSection(){
    bgRect(plasmaPosX,plasmaPosY,500,175);
    textAlign(LEFT,CENTER);
    fill(255);
    textSize(25);
    text("Plasma Igniter",plasmaPosX+25,plasmaPosY+22);
    textAlign(CENTER,CENTER);
    fill(220);
    textSize(20);
    text("Duration",plasmaPosX+258.333f+50,plasmaPosY+30);
    text("Delay",plasmaPosX+425,plasmaPosY+30);
    plasmaI.handle();
    plasmaAutoI.handle();
    plasmaDelayS.handle();
    plasmaDurationS.handle();
    plasmaAutoB.handle();
    plasmaTestB.handle();
}
class PlasmaIndicator{
    float posX = 500;
    float posY = 200;
    boolean active = false;
    boolean requested = false;
    public void render(){
        
        stroke(120);
        strokeWeight(2);
        fill(20);
        rect(this.posX,this.posY,100,50,25);
        fill(160);
        noStroke();
        ellipse(this.posX+5,this.posY+25,10,5);
        ellipse(this.posX+95,this.posY+25,10,5);
        stroke(requested?color(200,200,255):color(110));
        strokeWeight(2);
        noFill();
        rect(this.posX,this.posY,100,50,25);
        if(this.active){
            stroke(200,200,255);
            strokeWeight(sqr(random(1,2)));
            int n = 6;
            float y = 0;
            float yn = sqrs(random(-4,4));
            for(int i = 0; i < n-1; i++){
                line(this.posX+10+(100/n*i),posY+25+y,this.posX+10+(100/n*(i+1)),posY+25+yn);
                y = yn;
                yn = sqrs(random(-4,4));
                if(i==n-3){
                    yn=0;
                }
            }
        }
    }
    public void handle(){
        //this.update();
        this.render();
    }
}

float pressurePosX = 50;
float pressurePosY = 50;

TargetSlider pressureS = new TargetSlider();
Button bleedB = new Button();
Button fillB = new Button();
Button adjustB = new Button();
Button stopB = new Button();
Indicator fillingI = new Indicator();
Indicator bleedingI = new Indicator();
Indicator adjustingI = new Indicator();

public void setupPressureSection(){
    pressureS.posX = pressurePosX+25;
    pressureS.posY = pressurePosY+40;
    pressureS.heading = "Tank Pressure : ";
    pressureS.unit = " MPa";
    pressureS.range = 1;
    pressureS.width = 1000;
    bleedB.posY = fillB.posY = adjustB.posY = stopB.posY = fillingI.posY = bleedingI.posY = adjustingI.posY = pressurePosY+145;
    fillingI.baseColor = GREEN;
    bleedingI.baseColor = GREEN;
    adjustingI.baseColor = YELLOW;

    stopB.baseColor = ORANGE;
    adjustingI.textSize = 20;

    bleedB.posX = pressurePosX+25;
    fillB.posX = pressurePosX+150;
    fillingI.posX = pressurePosX+300;
    bleedingI.posX = pressurePosX+425;
    adjustB.posX = pressurePosX+1025-375;
    stopB.posX = pressurePosX+1025-250;
    adjustingI.posX = pressurePosX+1025-125;

    bleedB.text = "Bleed";
    fillB.text = "Fill";
    fillingI.text = "Filling";
    bleedingI.text = "Bleeding";
    adjustB.text = "Adjust";
    stopB.text = "Stop";
    adjustingI.text = "Adjusting";
}
public void handlePressureSection(){
    bgRect(pressurePosX,pressurePosY,1050,210);
    
    bleedB.handle();
    fillB.handle();
    stopB.handle();
    adjustB.handle();
    bleedingI.handle();
    fillingI.handle();
    adjustingI.handle();

    pressureS.handle();
}
class TargetSlider{
    float posX = 10;
    float posY = 10;
    float fill = 0.3f;
    int bg = color(50);
    int fg = color(0,255,0);
    float width = 300;
    float height = 50;
    int slideColor = color(255,0,0);
    float setpoint = 0.7f;
    boolean dragging = false;
    boolean focused = false;
    boolean prevPressed = false;
    float textFieldSize = 75;
    float textFieldSizeF = 120;
    float range = 1;
    String unit = "MPa";
    int round = 10;
    int roundF = 100;
    boolean drawBG = false;
    String heading = "Pressure : ";
    public void setup(float x, float y, float w, float h){
        this.posX=x;
        this.posY=y;
        this.width=w;
        this.height=h;
    }
    public void show(){
        if(this.drawBG){
            fill(120);
            strokeWeight(3);
            stroke(80);
            rect(this.posX-25,this.posY-40,this.width+50,this.height+95,20);
        }

        fill(this.bg);
        strokeWeight(3);
        stroke(0);
        rect(this.posX,this.posY,this.width,this.height);
        fill(this.fg);
        noStroke();
        rect(this.posX+3,this.posY+3,this.width*this.fill-4,this.height-5);
        fill(slideColor);
        stroke(slideColor);
        strokeWeight(2);
        line(this.width*this.setpoint+this.posX,this.posY,this.width*this.setpoint+this.posX,this.posY+this.height);
        this.focused=mouseIn(this.width*this.setpoint+this.posX,this.height+this.posY+20,30);
        if(!this.dragging && !this.focused){
            noStroke();
        }else{
            stroke(0);
        }
        
        triangle(this.width*this.setpoint+this.posX, this.height+this.posY, this.width*this.setpoint+this.posX-8, this.height+this.posY+10, this.width*this.setpoint+this.posX+8, this.height+this.posY+10);
        
        strokeWeight(2);
        if(!focused && !dragging){
            fill(GRAY);
            stroke(110);
            rect(max(min(this.setpoint*this.width-(this.textFieldSize/2),this.width-this.textFieldSize),0)+this.posX,this.posY+this.height+15,this.textFieldSize,30);
            fill(0);
            textAlign(CENTER,CENTER);
            textSize(20);
            text(str(PApplet.parseFloat(round(round*this.setpoint*this.range))/round)+this.unit,   max(min(this.setpoint*this.width,this.width-(this.textFieldSize/2)),(this.textFieldSize/2))+this.posX,this.posY+this.height+30);
        }else{
            fill(this.dragging?pressedColor(GRAY):selectedColor(GRAY));
            stroke(40);
            rect(max(min(this.setpoint*this.width-(this.textFieldSizeF/2),this.width-this.textFieldSizeF),0)+this.posX,this.posY+this.height+15,this.textFieldSizeF,40);
            fill(0);
            textAlign(CENTER,CENTER);
            textSize(30);
            text(str(PApplet.parseFloat(round(roundF*this.setpoint*this.range))/roundF)+this.unit,   max(min(this.setpoint*this.width,this.width-(this.textFieldSizeF/2)),(this.textFieldSizeF/2))+this.posX,this.posY+this.height+35);
        }
        fill(255);
        textAlign(LEFT,CENTER);
        textSize(25);
        text(heading+nf(PApplet.parseFloat(round(this.fill*range*100))/100,0,2)+unit,this.posX,this.posY-18);
    }
    public void update(){
        if(mousePressed && !this.prevPressed){
            if(mouseIn(this.width*this.setpoint+this.posX,this.height+this.posY+10,30)){
                this.dragging = true;
            }
        }
        if(!mousePressed){
            this.dragging=false;
        }
        if(this.dragging){
            this.setpoint=max(0,min(1,map(mouseX,this.posX,this.posX+this.width,0,1)));
        }
        this.prevPressed = mousePressed;
    }
    public void handle(){
        this.update();
        this.show();
    }
}
class ValSlider{
    
    float posX = 500;
    float posY = 300;
    float value = 0;
    float range = 10;
    String unit = "S";
    float mouseStartX = 0;
    boolean dragging = false;
    boolean prevPress = false;
    float valueOffset = 0;
    int baseColor = GRAY;
    public void render(){
        if(this.dragging||mouseInRect(this.posX,this.posY,100,40)){
            fill(this.dragging?pressedColor(baseColor):selectedColor(baseColor));
            stroke(40);
            strokeWeight(3);
        }else{
            fill(baseColor);
            stroke(110);
            strokeWeight(3);
        }
        rect(this.posX,this.posY,100,40);
        fill(0);
        textAlign(CENTER,CENTER);
        textSize(30);
        text(nf(round(40*this.value*this.range)/40.0f,0,2)+this.unit,this.posX+50,this.posY+20);
    }
    public void update(){
        if(mouseInRect(this.posX,this.posY,100,40)){
            if(mousePressed && !this.prevPress){
                this.dragging = true;
                this.mouseStartX = mouseX;
                this.valueOffset = this.value;
            }
        }
        if(!mousePressed){
            this.dragging = false;
        }
        if(dragging){
            this.value = min(1,max(0,round(40.0f*(this.valueOffset+((mouseX-mouseStartX)/400)))/40.0f));
        }

        this.prevPress = mousePressed;
    }

    public void handle(){
        this.update();
        this.render();
    }
}
public boolean within(float a, float b, float range){
    if(a>b+range){return false;}
    if(a<b-range){return false;}
    return true;
}

public boolean mouseIn(float x, float y, float r){
    float dx = abs(mouseX-x);
    float dy = abs(mouseY-y);
    return sqrt(sqr(dx)+sqr(dy)) <= r;
}

public boolean mouseInRect(float x, float y, float w, float h){
    return mouseX<x+w&&mouseX>=x&&mouseY<y+h&&mouseY>=y;
}

public float sqr(float a){
    return a*a;
}

public float sqrs(float a){
    return a<0?-a*a:a*a;
}

public int selectedColor(int inC){
    return(color( max(0,red(inC)-10),max(green(inC)-10,0),min(255,blue(inC)+30)));
}

public int pressedColor(int inC){
    return(color(    max(0,(red(inC)-10)/1.2f)   ,     max((green(inC)-10)/1.2f,0),     min(255,(blue(inC)+30)/1.2f)     ));
}

public int inactiveColor(int inC){
    return(color(    max(0,(red(inC))/2)   ,     max((green(inC))/2,0),     min(255,(blue(inC))/2)     ));
}

public int requestedColor(int inC){
    return(color(    min(255,(red(inC))*1.3f)   ,     min((green(inC))*1.3f,255),     min(255,(blue(inC))*1.3f)     ));
}

float waterPosX = 600;
float waterPosY = 310;

BarIndicator waterLevelI = new BarIndicator();
Button resetWaterB = new Button();
Button enableWaterB = new Button();
Button disableWaterB = new Button();
Indicator waterRunningI = new Indicator();

public void setupWaterSection(){
    waterLevelI.posX = waterPosX+25;
    waterLevelI.posY = waterPosY+40;
    waterLevelI.width = 450;
    waterLevelI.fg = BLUE;
    waterLevelI.unit = "L";
    waterLevelI.heading = "Water : ";
    resetWaterB.baseColor = ORANGE;
    enableWaterB.baseColor = LIGHT_BLUE;
    disableWaterB.baseColor = LIGHT_BLUE;
    resetWaterB.text = "reset";
    enableWaterB.text = "ON";
    disableWaterB.text = "OFF";
    waterRunningI.baseColor = BRIGHT_BLUE;
    waterRunningI.text = "Filling";
    disableWaterB.posY = resetWaterB.posY = waterRunningI.posY = enableWaterB.posY = waterPosY+110;
    disableWaterB.posX = waterPosX+25;
    enableWaterB.posX = waterPosX+141.666f;
    waterRunningI.posX = waterPosX+258.333f;
    resetWaterB.posX = waterPosX+375;
}

public void handleWaterSection(){
    bgRect(waterPosX,waterPosY,500,175);
    waterLevelI.handle();
    waterRunningI.handle();
    enableWaterB.handle();
    disableWaterB.handle();
    resetWaterB.handle();
}


  public void settings() { size(1700, 535+450); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "canon" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
