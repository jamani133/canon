/* autogenerated by Processing revision 1293 on 2025-05-22 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class canon extends PApplet {

BarIndicator linePressure = new BarIndicator();
TargetSlider tankPressure = new TargetSlider();
Joystick aimer = new Joystick();
PlasmaIndicator indicator = new PlasmaIndicator();
public void setup(){
    /* size commented out by preprocessor */;
    tankPressure.setup(50,220,400,50);
}

public void draw(){
    background(200);
    linePressure.fill=map(millis()%1000,0,999,0,1);
    linePressure.show();
    tankPressure.update();
    tankPressure.show();
    aimer.update();
    aimer.render();
    indicator.render();
}
class BarIndicator{
    float posX = 50;
    float posY = 50;
    float fill = 0.3f;
    int bg = color(50);
    int fg = color(0,255,0);
    float width = 300;
    float height = 50;
    String heading = "Heading : ";
    String unit = "\tBar";
    float range = 9.81f;

    public void show(){
        fill(120);
        strokeWeight(3);
        stroke(80);
        rect(this.posX-25,this.posY-40,this.width+50,this.height+65,20);

        fill(this.bg);
        strokeWeight(3);
        stroke(0);
        rect(this.posX,this.posY,this.width,this.height);
        fill(this.fg);
        rect(this.posX,this.posY,this.width*this.fill,this.height);
        fill(255);
        textAlign(LEFT,CENTER);
        textSize(25);
        text(heading+str(PApplet.parseFloat(round(this.fill*range*100))/100)+unit,this.posX,this.posY-18);
    }
}
class Button{

}
class Joystick{
    float size = 200;
    float posX = 400;
    float posY = 400;
    float joyX = 0;
    float joyY = 0;
    boolean dragging = false;
    boolean prevPress = false;
    public void render(){
        stroke(80);
        strokeWeight(3);
        fill(120);
        rect(this.posX,this.posY,this.size,this.size,20);
        noStroke();
        fill(160);
        ellipse(this.posX+(this.size/2), this.posY+(this.size/2), this.size/10*8, this.size/10*8);
        fill(200,0,0);
        ellipse(this.posX+(this.size/2)+((this.size*0.25f)*this.joyX),this.posY+(this.size/2)+((this.size*0.25f)*this.joyY),this.size*0.3f,this.size*0.3f);
    }
    public void update(){
        if(mouseIn(this.posX+(this.size/2),this.posX+(this.size/2),this.size/10*4)){
            if(mousePressed && !this.prevPress){
                this.dragging = true;
            }
        }
        if(!mousePressed){
                this.dragging = false;
        }
        if(this.dragging){
            float dx = (mouseX-(this.posX+(this.size/2)))/(this.size/4);
            float dy = (mouseY-(this.posY+(this.size/2)))/(this.size/4);
            float d = sqrt((dx*dx)+(dy*dy));
            if(d>1){
                dy = dy/d;
                dx = dx/d;
            }
            
            joyX = dx;
            joyY = dy;
        }else{
            joyX = 0;
            joyY = 0;
        }
        this.prevPress = mousePressed;
    }
}
class PlasmaIndicator{
    float posX = 500;
    float posY = 200;
    boolean active = false;
    public void render(){
        
        stroke(120);
        strokeWeight(2);
        fill(20);
        rect(this.posX,this.posY,100,50,25);
        fill(160);
        noStroke();
        ellipse(this.posX+5,this.posY+25,10,5);
        ellipse(this.posX+95,this.posY+25,10,5);
        stroke(120);
        strokeWeight(2);
        noFill();
        rect(this.posX,this.posY,100,50,25);
        this.active=keyPressed;
        if(this.active){
            stroke(200,200,255);
            strokeWeight(sqr(random(1,2)));
            int n = 6;
            float y = 0;
            float yn = sqrs(random(-4,4));
            for(int i = 0; i < n-1; i++){
                line(this.posX+10+(100/n*i),posY+25+y,this.posX+10+(100/n*(i+1)),posY+25+yn);
                y = yn;
                yn = sqrs(random(-4,4));
                if(i==n-3){
                    yn=0;
                }
            }
        }
    }
}

public float sqr(float a){
    return a*a;
}

public float sqrs(float a){
    return a<0?-a*a:a*a;
}
class TargetSlider{
    float posX = 10;
    float posY = 10;
    float fill = 0.3f;
    int bg = color(50);
    int fg = color(0,255,0);
    float width = 300;
    float height = 50;
    int slideColor = color(255,0,0);
    float setpoint = 0.7f;
    boolean dragging = false;
    boolean focused = false;
    boolean prevPressed = false;
    float textFieldSize = 75;
    float textFieldSizeF = 120;
    float range = 1;
    String unit = "MPa";
    int round = 10;
    int roundF = 100;
    String heading = "Pressure : ";
    public void setup(float x, float y, float w, float h){
        this.posX=x;
        this.posY=y;
        this.width=w;
        this.height=h;
    }
    public void show(){
        fill(120);
        strokeWeight(3);
        stroke(80);
        rect(this.posX-25,this.posY-40,this.width+50,this.height+95,20);

        fill(this.bg);
        strokeWeight(3);
        stroke(0);
        rect(this.posX,this.posY,this.width,this.height);
        fill(this.fg);
        rect(this.posX,this.posY,this.width*this.fill,this.height);
        fill(slideColor);
        stroke(slideColor);
        strokeWeight(2);
        line(this.width*this.setpoint+this.posX,this.posY,this.width*this.setpoint+this.posX,this.posY+this.height);
        this.focused=mouseIn(this.width*this.setpoint+this.posX,this.height+this.posY+20,30);
        if(!this.dragging && !this.focused){
            noStroke();
        }else{
            stroke(0);
        }
        
        triangle(this.width*this.setpoint+this.posX, this.height+this.posY, this.width*this.setpoint+this.posX-8, this.height+this.posY+10, this.width*this.setpoint+this.posX+8, this.height+this.posY+10);
        
        strokeWeight(2);
        if(!focused && !dragging){
            fill(160);
            stroke(130);
            rect(max(min(this.setpoint*this.width-(this.textFieldSize/2),this.width-this.textFieldSize),0)+this.posX,this.posY+this.height+15,this.textFieldSize,30);
            fill(0);
            textAlign(CENTER,CENTER);
            textSize(20);
            text(str(PApplet.parseFloat(round(round*this.setpoint*this.range))/round)+this.unit,   max(min(this.setpoint*this.width,this.width-(this.textFieldSize/2)),(this.textFieldSize/2))+this.posX,this.posY+this.height+30);
        }else{
            fill(160,160,190);
            stroke(130);
            rect(max(min(this.setpoint*this.width-(this.textFieldSizeF/2),this.width-this.textFieldSizeF),0)+this.posX,this.posY+this.height+15,this.textFieldSizeF,40);
            fill(0);
            textAlign(CENTER,CENTER);
            textSize(30);
            text(str(PApplet.parseFloat(round(roundF*this.setpoint*this.range))/roundF)+this.unit,   max(min(this.setpoint*this.width,this.width-(this.textFieldSizeF/2)),(this.textFieldSizeF/2))+this.posX,this.posY+this.height+35);
        }
        fill(255);
        textAlign(LEFT,CENTER);
        textSize(25);
        text(heading+str(PApplet.parseFloat(round(this.fill*range*100))/100)+unit,this.posX,this.posY-18);
    }
    public void update(){
        if(mousePressed && !this.prevPressed){
            if(mouseIn(this.width*this.setpoint+this.posX,this.height+this.posY+10,20)){
                this.dragging = true;
            }
        }
        if(!mousePressed){
            this.dragging=false;
        }
        if(this.dragging){
            this.setpoint=max(0,min(1,map(mouseX,this.posX,this.posX+this.width,0,1)));
        }
        this.prevPressed = mousePressed;
    }
}
public boolean within(float a, float b, float range){
    if(a>b+range){return false;}
    if(a<b-range){return false;}
    return true;
}

public boolean mouseIn(float x, float y, float r){
    float dx = abs(mouseX-x);
    float dy = abs(mouseY-y);
    return sqrt((dx*dx)+(dy*dy)) <= r;
}


  public void settings() { size(1200, 900); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "canon" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
